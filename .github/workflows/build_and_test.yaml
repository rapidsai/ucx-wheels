name: build_and_test

on:
  workflow_call:
    inputs:
      build_type:
        required: true
        type: string

permissions:
  actions: read
  checks: none
  contents: read
  deployments: none
  discussions: none
  id-token: write
  issues: none
  packages: read
  pages: none
  pull-requests: read
  repository-projects: none
  security-events: none
  statuses: none

jobs:
  compute-build-matrix:
    runs-on: ubuntu-latest
    outputs:
      MATRIX: ${{ steps.compute-matrix.outputs.MATRIX }}
    steps:
      - name: Compute Build Matrix
        id: compute-matrix
        run: |
          set -eo pipefail

          export MATRIX="
          # amd64
          - { ARCH: 'amd64', PY_VER: '3.11', CUDA_VER: '11.8.0', LINUX_VER: 'rockylinux8' }
          - { ARCH: 'amd64', PY_VER: '3.11', CUDA_VER: '12.2.2', LINUX_VER: 'rockylinux8' }
          # arm64
          - { ARCH: 'arm64', PY_VER: '3.11', CUDA_VER: '11.8.0', LINUX_VER: 'rockylinux8' }
          - { ARCH: 'arm64', PY_VER: '3.11', CUDA_VER: '12.2.2', LINUX_VER: 'rockylinux8' }
          "

          MATRIX="$(
            yq -n -o json 'env(MATRIX)' | \
            jq -c '{include: .}'
          )"

          echo "MATRIX=${MATRIX}" | tee --append "${GITHUB_OUTPUT}"
  build:
    name:  build-${{ matrix.CUDA_VER }}, ${{ matrix.ARCH }}, ${{ matrix.LINUX_VER }}
    needs: compute-build-matrix
    strategy:
      matrix: ${{ fromJSON(needs.compute-build-matrix.outputs.MATRIX) }}
    runs-on: "linux-${{ matrix.ARCH }}-cpu16"
    container:
      image: "rapidsai/ci-wheel:cuda${{ matrix.CUDA_VER }}-${{ matrix.LINUX_VER }}-py${{ matrix.PY_VER }}"
      env:
        RAPIDS_BUILD_TYPE: ${{ inputs.build_type }}
    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}
          role-duration-seconds: 43200 # 12h
      - name: checkout code repo
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Get current date
        id: date
        run: |
          echo "CURRENT_DATE=$(date --rfc-3339=date)" >> ${GITHUB_ENV}
      - name: Standardize repository information
        uses: rapidsai/shared-actions/rapids-github-info@main
        with:
          repo: ${{ github.repository }}
          branch: ${{ github.ref_name }}
          date: ${{ steps.date.outputs.date }}
          sha: ${{ github.ref_name }}
      - name: Build and repair the wheel
        run: ci/build_wheel.sh
        env:
          GH_TOKEN: ${{ github.token }}
          RAPIDS_BUILD_TYPE: ${{ inputs.build_type }}
        # Use a shell that loads the rc file so that we get the compiler settings
        shell: bash -leo pipefail {0}
  compute-test-matrix:
    needs: build
    runs-on: ubuntu-latest
    outputs:
      MATRIX: ${{ steps.compute-matrix.outputs.MATRIX }}
    steps:
      - name: Compute test matrix
        id: compute-matrix
        run: |
          set -eo pipefail

          # please keep the matrices sorted in ascending order by the following:
          #
          #     [ARCH, PY_VER, CUDA_VER, LINUX_VER, GPU, DRIVER]
          #
          export MATRICES="
          # amd64
          - { ARCH: 'arm64', PY_VER: '3.11', CUDA_VER: '11.8.0', LINUX_VER: 'ubuntu20.04', gpu: 'a100', driver: 'latest' }
          - { ARCH: 'arm64', PY_VER: '3.11', CUDA_VER: '12.0.1', LINUX_VER: 'ubuntu22.04', gpu: 'a100', driver: 'latest' }
          - { ARCH: 'arm64', PY_VER: '3.11', CUDA_VER: '12.2.2', LINUX_VER: 'ubuntu20.04', gpu: 'a100', driver: 'latest' }
          # arm64
          - { ARCH: 'arm64', PY_VER: '3.11', CUDA_VER: '11.8.0', LINUX_VER: 'ubuntu22.04', gpu: 'a100', driver: 'latest' }
          - { ARCH: 'arm64', PY_VER: '3.11', CUDA_VER: '12.0.1', LINUX_VER: 'ubuntu20.04', gpu: 'a100', driver: 'latest' }
          - { ARCH: 'arm64', PY_VER: '3.11', CUDA_VER: '12.2.2', LINUX_VER: 'ubuntu22.04', gpu: 'a100', driver: 'latest' }
          "

          TEST_MATRIX=$(yq -n 'env(MATRICES)')
          export TEST_MATRIX

          MATRIX="$(
            yq -n -o json 'env(TEST_MATRIX)' | \
            jq -c '{include: .}'
          )"

          echo "MATRIX=${MATRIX}" | tee --append "${GITHUB_OUTPUT}"
  test:
    name: test-${{ matrix.CUDA_VER }}, ${{ matrix.ARCH }}, ${{ matrix.LINUX_VER }}, ${{ matrix.gpu }}
    needs: compute-test-matrix
    strategy:
      matrix: ${{ fromJSON(needs.compute-test-matrix.outputs.MATRIX) }}
    runs-on: "linux-${{ matrix.ARCH }}-gpu-${{ matrix.gpu }}-${{ matrix.driver }}-1"
    container:
      image: "rapidsai/citestwheel:cuda${{ matrix.CUDA_VER }}-${{ matrix.LINUX_VER }}-py${{ matrix.PY_VER }}"
      env:
        NVIDIA_VISIBLE_DEVICES: ${{ env.NVIDIA_VISIBLE_DEVICES }} # GPU jobs must set this container env variable
        RAPIDS_BUILD_TYPE: ${{ inputs.build_type }}
    steps:
    - uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ vars.AWS_ROLE_ARN }}
        aws-region: ${{ vars.AWS_REGION }}
        role-duration-seconds: 43200 # 12h
    - name: Run nvidia-smi to make sure GPU is working
      run: nvidia-smi
    - name: checkout code repo
      uses: actions/checkout@v4
      with:
        persist-credentials: false
    - name: Get current date
      id: date
      run: |
        echo "CURRENT_DATE=$(date --rfc-3339=date)" >> ${GITHUB_ENV}
    - name: Standardize repository information
      uses: rapidsai/shared-actions/rapids-github-info@main
      with:
        repo: ${{ github.repository }}
        branch: ${{ github.ref_name }}
        date: ${{ steps.date.outputs.date }}
        sha: ${{ github.ref_name }}
    - name: Run tests
      run: ci/test_wheel.sh
      env:
        GH_TOKEN: ${{ github.token }}
        RAPIDS_BUILD_TYPE: ${{ inputs.build_type }}
  publish:
    if: ${{ inputs.build_type == 'branch' }}
    needs: test
    runs-on: linux-amd64-cpu4
    container:
      image: "rapidsai/ci-wheel:latest"
      env:
        RAPIDS_BUILD_TYPE: ${{ inputs.build_type }}
    steps:
    - uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ vars.AWS_ROLE_ARN }}
        aws-region: ${{ vars.AWS_REGION }}
        role-duration-seconds: 43200 # 12h
    - name: checkout code repo
      uses: actions/checkout@v4
      with:
        persist-credentials: false
    - name: Get current date
      id: date
      run: |
        echo "CURRENT_DATE=$(date --rfc-3339=date)" >> ${GITHUB_ENV}
    - name: Standardize repository information
      uses: rapidsai/shared-actions/rapids-github-info@main
      with:
        repo: ${{ github.repository }}
        branch: ${{ github.ref_name }}
        date: ${{ steps.date.outputs.date }}
        sha: ${{ github.ref_name }}
    - name: Download wheels from downloads.rapids.ai and publish to anaconda repository
      # TODO: This won't currently work because the tool only supports Python
      # wheels. That will require an update.
      run: rapids-wheels-anaconda ucx
      env:
        RAPIDS_CONDA_TOKEN: ${{ secrets.CONDA_RAPIDSAI_WHEELS_NIGHTLY_TOKEN }}
